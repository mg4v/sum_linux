---
LDD
Посмотреть какие библиотеки требуются приложению для его работы.

Например, если требется перенести приложение в другую директорию для дальнейшего chroot.

#
ldd <путь_до_исполняемого файла> 
#

------
CHROOT

Смена корневой (/) дериктории

#
chroot <путь_до_нового_корня> <путь_до_запускаемого_приложения>
#
---------
NAMESPACE

Механизм пространств имён
Пространство имён (англ. namespace) — это механизм ядра Linux, обеспечивающий изоляцию процессов друг от друга.
 Работа по его реализации была начата в версии ядра 2.4.19.
 На текущий момент в Linux поддерживается шесть типов пространств имён:
 - PID	PID процессов - создание нового (изолированного для находящихся в нем дочерних процессов) дерева процессов.
 - NETWORK	Сетевые устройства, стеки, порты и т.п.
   Благодаря пространству имён NET мы можем выделять для изолированных процессов собственные сeтевые интерфейсы.
   Даже loopback-интерфейс для каждого пространства имён будет отдельным.

 - USER	ID пользователей и групп
 - MOUNT	Точки монтирования - изолированная файловая система
 - IPC	SystemV IPC, очереди сообщений POSIX
 - UTS	Имя хоста и доменное имя NIS
   UTS используется для изоляции системных идентификаторов: имени узла (nodename) и имени домена (domainame),
    возвращаемых системным вызовом uname().
  Все эти типы используются современными системами контейнеризации (Docker, LXC и другими) при запуске программ.


------
STRACE

Средство трассировки(распечатки) системных вызовов, полезно для выявления ошибок.

#
; Начать трассировку процесса, заданного идентификатором(PID):
strace -p <number_of_pid>

; Трассировать процесс с фильтрацией выдач по определённому системному вызову:
strace -p <number_of_pid> -e <name_of_sys_call>

; Вывести при завершении программы таблицу, содержащую число обращений, ошибок и затраченное время по каждому из системных вызовов:
strace -p <number_of_pid> -c

; Отображать при трассировке время, затраченное системным вызовом:
strace -p <number_of_pid> -T

; Начать трассировку одновременно с выполнением программы:
strace <name_of_program>
#

------
LTRACE

Выводит список вызванных процессом функций из разделяемых библиотек

#
; Вывести трассировку вызовов библиотек при выполнении программы:
ltrace <name_of_program>

; Подсчитать количество вызовов библиотек, вывести итоговую таблицу при завершении процесса:
ltrace -c <path_to_program>

; Трассировать вызовы функций malloc и free, кроме тех, что были вызваны из библиотеки libc:
ltrace -e malloc+free-@libc.so* <path_to_program>

; Вывод в файл (не на терминал):
ltrace -o <name_of_file> <path_to_program>
#
